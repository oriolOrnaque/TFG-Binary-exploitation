import gdb


class Argv:
	def __init__(self, len_a=10, overflow=False):
		self.value = "A" * len_a
		if overflow:
			self.value += "\\"

	def __len__(self):
		return self.len_a + 1

	def __str__(self):
		return self.value


class Chunk:
	def __init__(self, addr, info, tcached=False):
		self.addr = addr
		self.info = info
		self.tcached = tcached

	def __getitem__(self, idx):
		if idx == 0:
			return self.addr
		elif idx == 1:
			return self.info
		else:
			raise IndexError("Index out of bounds")

	def __str__(self):
		return "".join([str(self.addr), ": ", str(self.info)])


def set_gdb_config():
	gdb.execute("set pagination off")
	gdb.execute("set breakpoint pending on")

def set_environment():
	gdb.execute("unset environment")
	for qwe in wer:
		key, value = qwe.split("=")
		gdb.execute(f"set environment {key} = {value}")

def set_breakpoints():
	gdb.execute("delete breakpoints")
	#gdb.execute("b set_cmnd")
	gdb.execute("b sudoers.c:854")

def run_sudoedit(argv=Argv()):
	print(f"Running {argv}")
	gdb.execute(f"run -n -s {argv}")

def parse_nss_databases():
	chunks = []
	char_pointer_type = gdb.lookup_type("char").pointer()
	service_table_addr = gdb.parse_and_eval("service_table")
	chunks.append(Chunk(service_table_addr, "service_table"))
	db = service_table_addr.dereference()["entry"]
	while db != 0x0:
		db_name = db.dereference()["name"].cast(char_pointer_type).string()
		chunks.append(Chunk(db, f"database {db_name}"))
		service = db.dereference()["service"]
		while service != 0x0:
			service_name = service.dereference()["name"].cast(char_pointer_type).string()
			chunks.append(Chunk(service, f"database: {db_name}, service: {service_name}"))
			service = service.dereference()["next"]
		db = db.dereference()["next"]
	return sorted(chunks, key=lambda x: x[0])

def parse_tcache():
	chunks = []
	tcache = gdb.parse_and_eval("tcache")
	size = 0x20
	for i in range(0, 64):
		chunk = tcache.dereference()["entries"][i]
		if chunk != 0x0:
			chunks.append(Chunk(chunk, hex(size), True))
		size += 0x10
	return chunks

if __name__ == "__main__":
	set_gdb_config()
	set_breakpoints()

	#set_environment()
	#argv = Argv(len_a=0x190, overflow=True)
	#run_sudoedit(argv)
	gdb.execute("run")
	chunks = parse_nss_databases()
	tcache = parse_tcache()
	heap = chunks + tcache
	heap = sorted(heap, key=lambda x: x[0])
	for chunk in heap:
		print(chunk)
	#gdb.execute("b sudoers.c:867")
	#gdb.execute("c")
	gdb.execute("b nss_load_library")
	gdb.execute("c")
